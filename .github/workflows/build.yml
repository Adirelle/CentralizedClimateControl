name: Build the mod

on:
  push:
    branches:
      - main
    tags:
      - 2.*
  pull_request: ~

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build the mod
    runs-on: windows-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      prerelease: ${{ steps.version.outputs.prerelease }}
    steps:
      - name: Check out sources
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "5.0.x"

      - name: Install dependencies
        run: dotnet restore --locked-mode

      - name: Install pandoc
        run: choco install -r pandoc

      - name: Extract the version string
        id: version
        shell: bash
        run: |
          VERSION="$(git describe --always)"
          echo "::set-output name=version::${VERSION%-g*}"
          case "$VERSION" in
            *-*-g*|*alpha*|*beta*)
              echo "::set-output name=prerelease::true"
            ;;
            *)
              echo "::set-output name=prerelease::false"
            ;;
          esac

      - name: Build all
        shell: bash
        run: |
          make distrib VERSION="${{ steps.version.outputs.version }}" RELEASE_TYPE="Release"

      - name: Upload the distribution
        uses: actions/upload-artifact@v2
        with:
          name: distribution
          path: "dist/**"

  release:
    name: Create a Github release
    if: ${{ ! github.base_ref }}
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Check out sources
        uses: actions/checkout@v2

      - name: Download the distribution
        uses: actions/download-artifact@v2
        with:
          name: distribution
          path: dist

      - name: Build the package
        run: make package VERSION="${{ needs.build.outputs.version }}"

      - name: Create the release
        if: ${{ ! github.base_ref }}
        uses: ncipollo/release-action@v1
        with:
          name: ${{ needs.build.outputs.version }}
          tag: ${{ needs.build.outputs.version }}
          commit: ${{ github.sha }}
          prerelease: ${{ needs.build.outputs.prerelease }}
          bodyFile: dist/CHANGELOG.md
          artifacts: dist/CentralizedClimateControl.zip
          artifactContentType: application/zip
          token: ${{ github.token }}
          allowUpdates: true
          replacesArtifacts: true

  publish:
    name: Publish to Steam workshop
    if: ${{ ! github.base_ref }}
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Check out sources
        uses: actions/checkout@v2

      - name: Download the distribution
        uses: actions/download-artifact@v2
        with:
          name: distribution
          path: dist

      - name: Prepare publishing
        run: make prepare-publish VERSION="${{ needs.build.outputs.version }}" HERE=${{ github.workspace }} STEAM_USERNAME=${{ secrets.STEAM_USERNAME }} STEAM_PASSWORD=${{ secrets.STEAM_PASSWORD }}

      - name: Publish using SteamCMD
        uses: docker://steamcmd/steamcmd:ubuntu
        with:
          args: +runscript ${{ github.workspace }}/dist/publish
        timeout-minutes: 10
